{
  "version": 3,
  "sources": ["../../prismjs/components/prism-c.js"],
  "sourcesContent": ["Prism.languages.c = Prism.languages.extend('clike', {\r\n\t'comment': {\r\n\t\tpattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'string': {\r\n\t\t// https://en.cppreference.com/w/c/language/string_literal\r\n\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'class-name': {\r\n\t\tpattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\r\n\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\r\n\t'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\r\n\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\r\n});\r\n\r\nPrism.languages.insertBefore('c', 'string', {\r\n\t'char': {\r\n\t\t// https://en.cppreference.com/w/c/language/character_constant\r\n\t\tpattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\r\n\t\tgreedy: true\r\n\t}\r\n});\r\n\r\nPrism.languages.insertBefore('c', 'string', {\r\n\t'macro': {\r\n\t\t// allow for multiline macro definitions\r\n\t\t// spaces after the # character compile fine with gcc\r\n\t\tpattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\talias: 'property',\r\n\t\tinside: {\r\n\t\t\t'string': [\r\n\t\t\t\t{\r\n\t\t\t\t\t// highlight the path of the include statement as a string\r\n\t\t\t\t\tpattern: /^(#\\s*include\\s*)<[^>]+>/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t},\r\n\t\t\t\tPrism.languages.c['string']\r\n\t\t\t],\r\n\t\t\t'char': Prism.languages.c['char'],\r\n\t\t\t'comment': Prism.languages.c['comment'],\r\n\t\t\t'macro-name': [\r\n\t\t\t\t{\r\n\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\talias: 'function'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t// highlight macro directives as keywords\r\n\t\t\t'directive': {\r\n\t\t\t\tpattern: /^(#\\s*)[a-z]+/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'keyword'\r\n\t\t\t},\r\n\t\t\t'directive-hash': /^#/,\r\n\t\t\t'punctuation': /##|\\\\(?=[\\r\\n])/,\r\n\t\t\t'expression': {\r\n\t\t\t\tpattern: /\\S[\\s\\S]*/,\r\n\t\t\t\tinside: Prism.languages.c\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\nPrism.languages.insertBefore('c', 'function', {\r\n\t// highlight predefined macros as constants\r\n\t'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\r\n});\r\n\r\ndelete Prism.languages.c['boolean'];\r\n"],
  "mappings": ";AAAA,MAAM,UAAU,IAAI,MAAM,UAAU,OAAO,SAAS;AAAA,EACnD,WAAW;AAAA,IACV,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AAAA,EACA,UAAU;AAAA;AAAA,IAET,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AAAA,EACA,cAAc;AAAA,IACb,SAAS;AAAA,IACT,YAAY;AAAA,EACb;AAAA,EACA,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AACb,CAAC;AAED,MAAM,UAAU,aAAa,KAAK,UAAU;AAAA,EAC3C,QAAQ;AAAA;AAAA,IAEP,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AACD,CAAC;AAED,MAAM,UAAU,aAAa,KAAK,UAAU;AAAA,EAC3C,SAAS;AAAA;AAAA;AAAA,IAGR,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,MACP,UAAU;AAAA,QACT;AAAA;AAAA,UAEC,SAAS;AAAA,UACT,YAAY;AAAA,QACb;AAAA,QACA,MAAM,UAAU,EAAE,QAAQ;AAAA,MAC3B;AAAA,MACA,QAAQ,MAAM,UAAU,EAAE,MAAM;AAAA,MAChC,WAAW,MAAM,UAAU,EAAE,SAAS;AAAA,MACtC,cAAc;AAAA,QACb;AAAA,UACC,SAAS;AAAA,UACT,YAAY;AAAA,QACb;AAAA,QACA;AAAA,UACC,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,OAAO;AAAA,QACR;AAAA,MACD;AAAA;AAAA,MAEA,aAAa;AAAA,QACZ,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,OAAO;AAAA,MACR;AAAA,MACA,kBAAkB;AAAA,MAClB,eAAe;AAAA,MACf,cAAc;AAAA,QACb,SAAS;AAAA,QACT,QAAQ,MAAM,UAAU;AAAA,MACzB;AAAA,IACD;AAAA,EACD;AACD,CAAC;AAED,MAAM,UAAU,aAAa,KAAK,YAAY;AAAA;AAAA,EAE7C,YAAY;AACb,CAAC;AAED,OAAO,MAAM,UAAU,EAAE,SAAS;",
  "names": []
}
